AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CodePipeline for automated CI/CD of CloudFormation stack with NAT Gateway, ECS, ALB, RDS, and ECR using GitHub

Parameters:
  GitHubOwner:
    Type: String
    Description: GitHub username or organization
  GitHubRepo:
    Type: String
    Description: GitHub repository name
    Default: my-ecs-repo
  GitHubBranch:
    Type: String
    Description: GitHub branch to monitor
    Default: main
  GitHubOAuthToken:
    Type: String
    Description: GitHub OAuth token for CodePipeline
    NoEcho: true
  BuildProjectName:
    Type: String
    Default: ECSBuild
  StackName:
    Type: String
    Default: ECSStack
  TemplateFile:
    Type: String
    Default: infrastructure.yaml
  ECRRepositoryName:
    Type: String
    Default: ecs-app-repo

Resources:
  # CodeBuild Project
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Ref BuildProjectName
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
        EnvironmentVariables:
          - Name: STACK_NAME
            Value: !Ref StackName
          - Name: TEMPLATE_FILE
            Value: !Ref TemplateFile
          - Name: ECR_REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepositoryName}
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              commands:
                - echo Installing dependencies...
                - pip install cfn-lint
            pre_build:
              commands:
                - echo Validating CloudFormation template...
                - cfn-lint $TEMPLATE_FILE
                - echo Logging into Amazon ECR...
                - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPOSITORY_URI
            build:
              commands:
                - echo Building Docker image...
                - docker build -t $ECR_REPOSITORY_URI:latest .
            post_build:
              commands:
                - echo Pushing Docker image to ECR...
                - docker push $ECR_REPOSITORY_URI:latest
                - echo Build completed
          artifacts:
            files:
              - $TEMPLATE_FILE
              - appspec.yml
      Cache:
        Type: NO_CACHE

  # CodeBuild IAM Role
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - s3:GetObject
                  - s3:PutObject
                  - cloudformation:ValidateTemplate
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:CompleteLayerUpload
                  - ecr:InitiateLayerUpload
                  - ecr:PutImage
                  - ecr:UploadLayerPart
                Resource: '*'

  # CodePipeline
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: GitHub
                Version: '2'
              OutputArtifacts:
                - Name: SourceArtifact
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubOAuthToken
                PollForSourceChanges: false
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact
              Configuration:
                ProjectName: !Ref BuildProjectName
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: DeployAction
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              InputArtifacts:
                - Name: BuildArtifact
              Configuration:
                ActionMode: CREATE_UPDATE
                StackName: !Ref StackName
                TemplatePath: BuildArtifact::infrastructure.yaml
                Capabilities: CAPABILITY_NAMED_IAM
                RoleArn: !GetAtt CloudFormationRole.Arn
              RunOrder: 1
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket

  # S3 Bucket for Artifacts
  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub codepipeline-artifact-${AWS::AccountId}-${AWS::Region}

  # CodePipeline IAM Role
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                  - codebuild:*
                  - cloudformation:*
                  - iam:PassRole
                Resource: '*'

  # CloudFormation IAM Role for Deployment
  CloudFormationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudFormationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:*
                  - ecs:*
                  - elasticloadbalancing:*
                  - rds:*
                  - logs:*
                  - s3:*
                  - ecr:*
                Resource: '*'

Outputs:
  PipelineUrl:
    Description: URL of the CodePipeline
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/codesuite/codepipeline/pipelines/${CodePipeline}/view